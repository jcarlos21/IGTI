# -*- coding: utf-8 -*-
"""TrabalhoPratico01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RgvKavV1HRQ4xsfV3QoxGByaNwPQwbuh

**Trabalho Prático**

**Objetivos**

Exercitar os seguintes conceitos trabalhados no Módulo:

✓ Criação e manipulação de numpy arrays.

✓ Leitura de dados e manipulação de DataFrames e Series no pandas.

✓ Fundamentos de aprendizado de máquinas.

**Enunciado**

Em um ambiente de desenvolvimento em Python (recomenda-se o Google Colaboratory), execute 
e/ou complete os trechos de código contidos nas imagens.
"""

import numpy as np
import pandas as pd

# == CÓDIGO 1 == #
Z = np.zeros((4,))
print("Z: ", Z)

# == CÓDIGO 2 == #
Z = np.zeros((4,))
Z[1] = 1
print("Z: ", Z)

# == CÓDIGO 3 == #
Z = np.zeros((4,))
Z[1:] = 1
print("Z: ", Z)

# == CÓDIGO 4 == #
Z = np.zeros((4,))
Z[:3] = 1
# Z[:-1] = 1
print("Z: ", Z)

# == CÓDIGO 5 == #
X = np.array([[2, 2], [2, 2]])
# X = np.twos((2, 2))
# X = np.array([2.] * 4).reshape(2, 2)
# X = np.ones((2, 2)) + np.ones((2, 2))
print("X:\n", X)

# == CÓDIGO 6 == #
X = np.array([[1, 2], [3, 4]])
Y = X[0, :]
# print("Y:\n", Y)
Y[1] = 10
print("X:\n", X)

# == CÓDIGO 7 == #
X = np.array([[1, 3], [11, 10]])
print(np.mean(X[X > np.pi]))

# == CÓDIGO 8 == #
data = {'animal': ['cat', 'cat', 'snake', 'dog', 'dog',
                    'cat', 'snake', 'cat', 'dog', 'dog'],
        'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
        'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'priority': ['yes', 'yes', 'no', 'yes', 'no',
                     'no', 'no', 'yes', 'no', 'no']}
labels = ['a','b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

# == CÓDIGO 9 == #
df = pd.DataFrame(data=data, index=labels)
df.shape
df['animal'].value_counts()
# df.describe()

# df['visits']
# df.loc[:, 'visits']
# df.iloc[:, 3] # Não gera a coluna 'visits'
# df.iloc[:, -2]
# df.sort_index(by='visits', ascending=False) # Gera erro!
df.sort_values(by='visits', ascending=False)

# == CÓDIGO 10 == #
y_true = np.array([1., 2., 1.])
# y_pred = np.array([1.1, 1.98, 1.05])
y_pred = y_true
np.sqrt(((y_true-y_pred)**2).mean())